(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/* jshint browser: true */
/*jshint unused:false*/

(function () {

    'use strict';

    // Feature Test

    if ('querySelector' in document && 'addEventListener' in window && Array.prototype.forEach) {
        (function () {

            //Function to toggle menu mobile
            var actionMenu = function actionMenu() {
                document.getElementById("gg-menu").classList.toggle("open");
                document.getElementById("gg-menu-mobile").classList.toggle("opened");
            };

            document.getElementById("gg-menu-mobile").addEventListener("click", actionMenu);

            // Function to animate the scroll
            var smoothScroll = function smoothScroll(anchor, duration) {

                // Calculate how far and how fast to scroll
                var startLocation = window.pageYOffset;
                var endLocation = anchor.offsetTop;
                var distance = endLocation - startLocation;
                var increments = distance / (duration / 16);
                var stopAnimation = void 0;

                // Scroll the page by an increment, and check if it's time to stop
                var animateScroll = function animateScroll() {
                    window.scrollBy(0, increments);
                    stopAnimation();
                };

                // If scrolling down
                if (increments >= 0) {
                    // Stop animation when you reach the anchor OR the bottom of the page
                    stopAnimation = function stopAnimation() {
                        var travelled = window.pageYOffset;
                        if (travelled >= endLocation - increments || window.innerHeight + travelled >= document.body.offsetHeight) {
                            clearInterval(runAnimation);
                        }
                    };
                }
                // If scrolling up
                else {
                        // Stop animation when you reach the anchor OR the top of the page
                        stopAnimation = function stopAnimation() {
                            var travelled = window.pageYOffset;
                            if (travelled <= (endLocation || 0)) {
                                clearInterval(runAnimation);
                            }
                        };
                    }

                // Loop the animation function
                var runAnimation = setInterval(animateScroll, 16);
            };

            // Define smooth scroll links
            var scrollToggle = document.querySelectorAll('.scroll');

            // For each smooth scroll link
            [].forEach.call(scrollToggle, function (toggle) {

                // When the smooth scroll link is clicked
                toggle.addEventListener('click', function (e) {

                    // Prevent the default link behavior
                    e.preventDefault();
                    // Get anchor link and calculate distance from the top
                    var dataID = toggle.getAttribute('href');
                    var dataTarget = document.querySelector(dataID);
                    var dataSpeed = toggle.getAttribute('data-speed');

                    // If the anchor exists
                    if (dataTarget) {
                        // Scroll to the anchor
                        actionMenu();
                        smoothScroll(dataTarget, dataSpeed || 1000);
                    }
                }, false);
            });
        })();
    }
})();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvYXNzZXRzL3NjcmlwdHMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUE7QUFDQzs7QUFFRCxDQUFDLFlBQVc7O0FBRVg7O0FBRUE7O0FBQ0csUUFBSyxtQkFBbUIsUUFBbkIsSUFBK0Isc0JBQXNCLE1BQXJELElBQStELE1BQU0sU0FBTixDQUFnQixPQUFwRixFQUE4RjtBQUFBOztBQUVoRztBQUZnRyxnQkFHdkYsVUFIdUYsR0FHaEcsU0FBUyxVQUFULEdBQXFCO0FBQ3BCLHlCQUFTLGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUMsU0FBbkMsQ0FBNkMsTUFBN0MsQ0FBb0QsTUFBcEQ7QUFDQSx5QkFBUyxjQUFULENBQXdCLGdCQUF4QixFQUEwQyxTQUExQyxDQUFvRCxNQUFwRCxDQUEyRCxRQUEzRDtBQUNBLGFBTitGOztBQVFoRyxxQkFBUyxjQUFULENBQXdCLGdCQUF4QixFQUEwQyxnQkFBMUMsQ0FBMkQsT0FBM0QsRUFBb0UsVUFBcEU7O0FBRU07QUFDQSxnQkFBSSxlQUFlLFNBQWYsWUFBZSxDQUFVLE1BQVYsRUFBa0IsUUFBbEIsRUFBNEI7O0FBRTNDO0FBQ0Esb0JBQUksZ0JBQWdCLE9BQU8sV0FBM0I7QUFDQSxvQkFBSSxjQUFjLE9BQU8sU0FBekI7QUFDQSxvQkFBSSxXQUFXLGNBQWMsYUFBN0I7QUFDQSxvQkFBSSxhQUFhLFlBQVUsV0FBUyxFQUFuQixDQUFqQjtBQUNBLG9CQUFJLHNCQUFKOztBQUVBO0FBQ0Esb0JBQUksZ0JBQWdCLFNBQWhCLGFBQWdCLEdBQVk7QUFDNUIsMkJBQU8sUUFBUCxDQUFnQixDQUFoQixFQUFtQixVQUFuQjtBQUNBO0FBQ0gsaUJBSEQ7O0FBS0E7QUFDQSxvQkFBSyxjQUFjLENBQW5CLEVBQXVCO0FBQ25CO0FBQ0Esb0NBQWdCLHlCQUFZO0FBQ3hCLDRCQUFJLFlBQVksT0FBTyxXQUF2QjtBQUNBLDRCQUFNLGFBQWMsY0FBYyxVQUE3QixJQUErQyxPQUFPLFdBQVAsR0FBcUIsU0FBdEIsSUFBb0MsU0FBUyxJQUFULENBQWMsWUFBckcsRUFBcUg7QUFDakgsMENBQWMsWUFBZDtBQUNIO0FBQ0oscUJBTEQ7QUFNSDtBQUNEO0FBVEEscUJBVUs7QUFDRDtBQUNBLHdDQUFnQix5QkFBWTtBQUN4QixnQ0FBSSxZQUFZLE9BQU8sV0FBdkI7QUFDQSxnQ0FBSyxjQUFjLGVBQWUsQ0FBN0IsQ0FBTCxFQUF1QztBQUNuQyw4Q0FBYyxZQUFkO0FBQ0g7QUFDSix5QkFMRDtBQU1IOztBQUVEO0FBQ0Esb0JBQUksZUFBZSxZQUFZLGFBQVosRUFBMkIsRUFBM0IsQ0FBbkI7QUFFSCxhQXZDRDs7QUF5Q0E7QUFDQSxnQkFBSSxlQUFlLFNBQVMsZ0JBQVQsQ0FBMEIsU0FBMUIsQ0FBbkI7O0FBRUE7QUFDQSxlQUFHLE9BQUgsQ0FBVyxJQUFYLENBQWdCLFlBQWhCLEVBQThCLFVBQVUsTUFBVixFQUFrQjs7QUFFNUM7QUFDQSx1QkFBTyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFTLENBQVQsRUFBWTs7QUFFekM7QUFDQSxzQkFBRSxjQUFGO0FBQ0E7QUFDQSx3QkFBSSxTQUFTLE9BQU8sWUFBUCxDQUFvQixNQUFwQixDQUFiO0FBQ0Esd0JBQUksYUFBYSxTQUFTLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBakI7QUFDQSx3QkFBSSxZQUFZLE9BQU8sWUFBUCxDQUFvQixZQUFwQixDQUFoQjs7QUFFQTtBQUNBLHdCQUFJLFVBQUosRUFBZ0I7QUFDWjtBQUNIO0FBQ0cscUNBQWEsVUFBYixFQUF5QixhQUFhLElBQXRDO0FBQ0g7QUFFSixpQkFoQkQsRUFnQkcsS0FoQkg7QUFrQkgsYUFyQkQ7QUF4RDBGO0FBOEU3RjtBQUVKLENBckZEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIGpzaGludCBicm93c2VyOiB0cnVlICovXG4gLypqc2hpbnQgdW51c2VkOmZhbHNlKi9cblxuKGZ1bmN0aW9uKCkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvLyBGZWF0dXJlIFRlc3RcbiAgICBpZiAoICdxdWVyeVNlbGVjdG9yJyBpbiBkb2N1bWVudCAmJiAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoICkge1xuXHRcblx0XHQvL0Z1bmN0aW9uIHRvIHRvZ2dsZSBtZW51IG1vYmlsZVxuXHRcdGZ1bmN0aW9uIGFjdGlvbk1lbnUoKXtcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2ctbWVudVwiKS5jbGFzc0xpc3QudG9nZ2xlKFwib3BlblwiKTtcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2ctbWVudS1tb2JpbGVcIikuY2xhc3NMaXN0LnRvZ2dsZShcIm9wZW5lZFwiKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdnLW1lbnUtbW9iaWxlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhY3Rpb25NZW51KTtcblxuICAgICAgICAvLyBGdW5jdGlvbiB0byBhbmltYXRlIHRoZSBzY3JvbGxcbiAgICAgICAgbGV0IHNtb290aFNjcm9sbCA9IGZ1bmN0aW9uIChhbmNob3IsIGR1cmF0aW9uKSB7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBob3cgZmFyIGFuZCBob3cgZmFzdCB0byBzY3JvbGxcbiAgICAgICAgICAgIGxldCBzdGFydExvY2F0aW9uID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgbGV0IGVuZExvY2F0aW9uID0gYW5jaG9yLm9mZnNldFRvcDtcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IGVuZExvY2F0aW9uIC0gc3RhcnRMb2NhdGlvbjtcbiAgICAgICAgICAgIGxldCBpbmNyZW1lbnRzID0gZGlzdGFuY2UvKGR1cmF0aW9uLzE2KTtcbiAgICAgICAgICAgIGxldCBzdG9wQW5pbWF0aW9uO1xuXG4gICAgICAgICAgICAvLyBTY3JvbGwgdGhlIHBhZ2UgYnkgYW4gaW5jcmVtZW50LCBhbmQgY2hlY2sgaWYgaXQncyB0aW1lIHRvIHN0b3BcbiAgICAgICAgICAgIGxldCBhbmltYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCBpbmNyZW1lbnRzKTtcbiAgICAgICAgICAgICAgICBzdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBJZiBzY3JvbGxpbmcgZG93blxuICAgICAgICAgICAgaWYgKCBpbmNyZW1lbnRzID49IDAgKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcCBhbmltYXRpb24gd2hlbiB5b3UgcmVhY2ggdGhlIGFuY2hvciBPUiB0aGUgYm90dG9tIG9mIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYXZlbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAodHJhdmVsbGVkID49IChlbmRMb2NhdGlvbiAtIGluY3JlbWVudHMpKSB8fCAoKHdpbmRvdy5pbm5lckhlaWdodCArIHRyYXZlbGxlZCkgPj0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChydW5BbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHNjcm9sbGluZyB1cFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcCBhbmltYXRpb24gd2hlbiB5b3UgcmVhY2ggdGhlIGFuY2hvciBPUiB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICAgICAgICAgICAgc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYXZlbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmF2ZWxsZWQgPD0gKGVuZExvY2F0aW9uIHx8IDApICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChydW5BbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vcCB0aGUgYW5pbWF0aW9uIGZ1bmN0aW9uXG4gICAgICAgICAgICBsZXQgcnVuQW5pbWF0aW9uID0gc2V0SW50ZXJ2YWwoYW5pbWF0ZVNjcm9sbCwgMTYpO1xuICAgICAgIFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIERlZmluZSBzbW9vdGggc2Nyb2xsIGxpbmtzXG4gICAgICAgIGxldCBzY3JvbGxUb2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2Nyb2xsJyk7XG5cbiAgICAgICAgLy8gRm9yIGVhY2ggc21vb3RoIHNjcm9sbCBsaW5rXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChzY3JvbGxUb2dnbGUsIGZ1bmN0aW9uICh0b2dnbGUpIHtcblxuICAgICAgICAgICAgLy8gV2hlbiB0aGUgc21vb3RoIHNjcm9sbCBsaW5rIGlzIGNsaWNrZWRcbiAgICAgICAgICAgIHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgbGluayBiZWhhdmlvclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgYW5jaG9yIGxpbmsgYW5kIGNhbGN1bGF0ZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3BcbiAgICAgICAgICAgICAgICBsZXQgZGF0YUlEID0gdG9nZ2xlLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkYXRhSUQpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhU3BlZWQgPSB0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXNwZWVkJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYW5jaG9yIGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmIChkYXRhVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0aGUgYW5jaG9yXG4gICAgICAgICAgICAgICAgXHRhY3Rpb25NZW51KCk7XG4gICAgICAgICAgICAgICAgICAgIHNtb290aFNjcm9sbChkYXRhVGFyZ2V0LCBkYXRhU3BlZWQgfHwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG59KSgpOyJdfQ==
